/* NOTE : Check both basic.css and basic.html side by side together, to inspect, user inspect option in browser */

/* 01. Comments
----------------
          
/* Comment out code here */


/*===========================================================================================================================================*/


/*   02. Where to Insert CSS
-----------------------------

Three Ways to Insert CSS

  1. External CSS - With an external style sheet, you can change the look of an entire website by changing just one file.
  Each HTML page must include a reference to external style sheet file inside the <link> element, inside the head section.

  2. Internal CSS - An internal style sheet may be used if one single HTML page has a unique style.
  The internal style is defined inside the <style> element, inside the head section.

  3. Inline CSS - An inline style may be used to apply a unique style for a single element.
  To use inline styles, add the style attribute to relevant element.  The style attribute can contain any CSS property. */

/*===========================================================================================================================================*/

/* 03. Syntax */

/* The selector points to the HTML element you want to style.
The declaration block contains one or more declarations separated by semicolons.
Each declaration includes a CSS property name and a value, separated by a colon.
Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.*/

  h1 {
    color: blue;
    font-size: 20px;
  }

/*===========================================================================================================================================*/



/* 04. Selectors
--------------------

A CSS selector selects the HTML element(s) you want to style.
We can divide CSS selectors into five categories:

  1. Simple selectors ( elements based on name, id, class)
    1. element
    2. id
    3. class
  2. Combinator selectors (select elements based on a specific relationship between them)
  3. Pseudo-class selectors (select elements based on a certain state)
  4. Pseudo-elements selectors (select and style a part of an element)
  5. Attribute selectors (select elements based on an attribute or attribute value) */







/*===========================================================================================================================================*/


/* 05. Colors
--------------

     Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.
*/

h1#color1{
    color: tomato;
}

h1#rgb{
    color:rgb(255, 145, 213);
}

h1#hex{
    color: #00ffff;
}

h1#hsl{
    color: hsl(360, 100%, 50%);
}



/*===========================================================================================================================================*/


/* 06. Backgrounds 
------------------- */

h1#background{
    background: blue;
    background-color: red;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
    background-image: url();
}




/*===========================================================================================================================================*/


/* 07. Borders
-------------------

    /* dotted */
    p#borders1{
        border-style: dotted; 
     }

    /* dashed - Defines a dashed border */
    p#borders2{
        border-style: dashed;
    }

    /* solid - Defines a solid border */
    p#borders3{
        border-style: solid;
    }

    /* double - Defines a double border */
    p#borders4{
        border-style: double;
    }

    /* groove - Defines a 3D grooved border.  The effect depends on the border-color value */

    /* ridge - Defines a 3D ridged border.  The effect depends on the border-color value */

    /* inset - Defines a 3D inset border.  The effect depends on the border-color value */

    /* outset - Defines a 3D outset border.  The effect depends on the border-color value */

    /* none - Defines no border */

    /* hidden - Defines a hidden border */
    p#borders10{
        border-style: hidden;
    }

    



/*===========================================================================================================================================*/


/* 08. Margins
-------------------

    CSS has properties for specifying the margin for each side of an element.

    All margin properties can have the following values:

    auto - the browser calculates the Margins

    length - specifies a margin in px, pt, cm

    % - specifies a margin in % of the width of the containing element

    inherit - specifies that the margin should be inherited from the parent element */


    div.margin{
        margin-top: 100px;
        margin-bottom: 100px;
        margin-left: 20px;
        margin-right: 20px;
        background-color: blue;
        height: 500px;
        width: 500px;
    }


/*===========================================================================================================================================*/


/* 09. Padding 
-------------------

    Padding is used to create space around an elements content, inside of any defined borders.

    With CSS, you have full control over the padding.  There are properties for setting the padding for each side of an element(top, right, bottom and left)
*/
    
    div.padding{
        padding-top: 10px;
        padding-bottom: 100px;
        padding-right: 20px;
        padding-left: 20px;
        padding: 10px 100px 20px 20px; /* This is a combination of top bottom left and right */
        background: black;
        width: 500px;
        height: 100px;
    }


/*===========================================================================================================================================*/


/* 10. Height and Width
-------------------

    The CSS max-width property is used to set the maximum witdh of an element.

    The height and width properties do not include padding, borders, or margins.  It sets the height/width of the area inside the
    padding, border, and margin of the element.

    The height and width properties may have the following values:

    auto - This is default.  The browser calculates the height and width.

    length - Defines the height/width in px, cm.

    % - Defines the height/width in percent of the containing block.

    initial - Sets the height/width to its default value.

    inherit - The height/width will be inherited from its parent value. */

        div.hw{
            width: 100px;
            height: 100px;
            background: green;
        }


/*===========================================================================================================================================*/


/* 11. Box Model
-------------------

    The CSS box model is essentially a box that wraps around every HTML element.
    It consists of: margins, borders, padding, and the actual content.

    Explanation of different parts in Box Model:

    Content - The content of the box, where text and images appear

    Padding - Clears an area around the content.  The padding is transparent

    Border - A border that goes around the padding and content

    Margin - Clears an area out the border. The margin is transparent
 */

    div.boxmodel{
        width: 500px;
        height: 500px;
        border: 5px solid aqua;
        padding: 30px;
        margin: 50px;

    }



/*===========================================================================================================================================*/


/* 12. Outline
-------------------

    An outline is a line that is drawn around elements, OUTSIDE the border, to make the element "stand out"*/
    p.outline1{
        outline-style: dashed;
    }

    p.outline2{
        outline-style: dotted;
    }


/*===========================================================================================================================================*/


/* 13. Text
-------------------

      /*
      CSS has a lot of properties for formatting text. */   
      h1#text1{
        color: orange;
        text-align: center;
        text-decoration: underline;
        text-transform: uppercase;
      }
    


/*===========================================================================================================================================*/


  /* 14. Fonts
-------------------

    In CSS, we use the font-family property to specify the font of a text.

    The font-family property should hold several font names as a "fallback" system, to ensure maxiumum compatibility between
    browsers/operating systems.  Start with the font you want, and end with a generic family (to let the browser pick a similar
    font in the generic family, if no other fonts are available).  The font names should be separated with a comma. */
      body{
        font-family: sans-serif, monospace;
        font-family: 'Roboto', sans-serif;
      }


/*===========================================================================================================================================*/


/* 15. Icons
-------------------

    Icons can easily be added to your HTML page, by using an icon library.

    How to Add Icons

    The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome.

    Add the name of the specified icon class to any inline HTML element (like <i> or <span>)

    All the icons in the icon libraries, are scalable vectors that can be customized with CSS (size, color, shadow)

    */




/*===========================================================================================================================================*/


/* 16. Links
-------------------

    Links can be styled with any CSS property.

    In addition, links can be styled differently depending on what state they are in.

    The four link states are:

    a:link - a normal, unvisited link
    a:visited - a link the user has visited
    a:hover - a link when the user mouses over it
    a:active - a link the moment it is clicked*/
    a:link{
        color: red;
    }

    a:visited{
        color: purple;
    }

    a:hover{
        color: black;  
    }

    a:active{
        color: green;
    }



/*===========================================================================================================================================*/


/* 17. Lists
-------------------
*/
    ul{
        list-style-type: square;
    }

    ol{
        list-style-type:lower-alpha;
    }



/*===========================================================================================================================================*/


/* 18. Tables
-------------------
*/
    table,tr, td {
        border: 1px solid black;
        width: 100%;
    }



/*===========================================================================================================================================*/


/* 19. Display
-------------------

    The display property specifies if/how an element can be displayed.

    Every HTML element has a default value depending on what type of element it is.
 */
    li.display{
        display: inline;
    }
     

/*===========================================================================================================================================*/


/* 20. Max-Width
-------------------
*/
    div.max{
        width: 500px;
        margin: auto;
        border: 5px solid black;
    }
    

/*===========================================================================================================================================*/


/* 21. Position
-------------------

    The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute, or sticky) */
    div.static{
       width: 500px;
       height: 500px;
       background: yellowgreen;
       position: static;
       border: 5px solid black; 
    }

/*===========================================================================================================================================*/


/* 22. Overflow
-------------------

    The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big
    to fit in the specified area.

    The overflow property has the following values:

    visible - Default The overflow is not clipped.  The content renders outside the elements box.
    hidden - The overflow is clipped and the rest of content will be invisible.
    scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content. */
    
    div.overflow{
        width: 400px;
        height: 400px;
        background: pink;
        border: 3px solid black;
        overflow: scroll;
    }

/*===========================================================================================================================================*/


/* 23. Float
-------------------

    The CSS float property specifies how an element should float.

    The CSS clear property specifies what elements can float beside the cleared element and on which side. */

    div.div1{
        width: 400px;
        height: 400px;
        background: tomato;
        border: 3px solid black;
        float: right;
    }

/*===========================================================================================================================================*/


/* 24. Inline-Block
-------------------

     */
    span.a{
        display: inline-block; /*Can also use: inline*/
        width: 100px;
        height: 100px;
        padding: 5px;
        border: 4px solid black;
        background: yellow;
    }

/*===========================================================================================================================================*/


/* 25. Align
-------------------
 */
    
    div.center{
        margin: auto;
        width: auto;
        height: 50%;
        height: 200px;
        background: dodgerblue;
        border: 3px solid rebeccapurple;
        padding: 10px;
    }

/*===========================================================================================================================================*/


/* 26. Combinators
-------------------

    A combinator is something that explains the relationship between the selectors.

    A CSS selector can contain more than one simple selector.  Between the simple selectors,
    we can include a combinator.

    There are four different combinators in CSS:

    1. descendant selector (space)
    2. child selector (>)
    3. adjacent sibling selector (+)
    4. general sibling selector (~) */

    div p {
        background: orange;
    }
    
    div > p {
        background: darkolivegreen;
    }

    div + p {
        background: chocolate;
    }

/*===========================================================================================================================================*/


/* 27. Pseudo Class
-------------------
 */
    div.hover{
       background: red;
       width: 100px;
       height: 50px;  
    }

    div.hover:hover{
        background: dodgerblue;
    }

/*===========================================================================================================================================*/


/* 28. Pseudo element
-------------------

    A CSS pseudo-element is used to style specified parts of an element. */
    p::first-line{
        color: blueviolet;
    }

/*===========================================================================================================================================*/


/* 29. Opacity
-------------------

    The opacity property specifies transparency of an element */
    img#googleimg{
        opacity: 0.8;
    }

    img#googleimg:hover{
        opacity: 0.4;
    }

/*===========================================================================================================================================*/


/* 30. Navigation Bar
-------------------
 */
    
    li{
        display: inline-flexbox;
    }


/*===========================================================================================================================================*/


/* 31. Dropdowns
-------------------

    Use CSS to create a dropdown */

/*===========================================================================================================================================*/


/* 32. Image Gallery
-------------------

    CSS can be used to create an image gallery */

/*===========================================================================================================================================*/


/* 33. Image Sprites
-------------------

    An image sprice is a collection of images put into a single image.

    A web page with many images can take a long time to load and generates multiple server requests.

    Using image sprice will reduce the number of server requests and save bandwidth. */

/*===========================================================================================================================================*/


/* 34. Attr Selectors
-------------------
*/
    a[target]{
        background: yellow;
    }


/*===========================================================================================================================================*/


/* 35. Forms
-------------------

    You can style Forms with CSS */
    input[type=text], select{
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 10px solid black;
        border-radius: 4px;
        box-sizing: border-box; 
    }

    input[type=submit]{
        width: 100%;
        background: lightcoral;
        color: white;
        padding: 15px 30px;
        margin: 9px 0;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    input[type=submit]:hover{
        background: green;
    }



/*===========================================================================================================================================*/


/* 36. Counters
-------------------

    CSS counters are "variables" maintained by CSS whose values can be incremented by CSS rules.
    Counters let you adjust the appearance of content based on its placement in the document. */


/*===========================================================================================================================================*/


/* 37. Website Layout
-------------------

    A website is often divided into headers, menus, content and a footer.

    Header - A header is usually located at the top of the website.

    Navigation Bar - A navigation bar contains a  list of links to help visitors navigating through your website.

    Check Project Files for Website Layout Example. */

/*===========================================================================================================================================*/


/* 38. Units
-------------------

    CSS has serveral different units for expressing a length.

    Many CSS properties take "length" values, such as width, margin, padding, font-size

    Length is a number followed by a length unit, such as 10px, 2em. */


/*===========================================================================================================================================*/


/* 39. Specificity
-------------------

    If there are two or more conflicting CSS rules that point to the same element, the browser follows some rule to determine
    which one is most specific and therefore wins out.

    Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.

    The universal selector (*) has low specificity, while ID selectors are highly specific!

    Every selector has its place in the specificity hierarchy.  There are four categories which define the specificity level of a selector:

    Inline Styles - An inline style is attached directly to the element to be styled.

    IDs - An ID is a unique identifier for the page elements, such as #navbar.

    Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus

    Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after. */

/*===========================================================================================================================================*/


/* 40. !important
-------------------

    The !important rule in CSS is used to add more importance to a property value than normal.

    In face, if you use the !important rule, it will override ALL previous styling rules for that
    specific property on that element! */
